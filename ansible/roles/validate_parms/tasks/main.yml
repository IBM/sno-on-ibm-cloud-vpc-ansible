---
- name: Verify that IBM Cloud API KEY is defined
  assert:
    that: lookup('env','IC_API_KEY') != ""
    fail_msg: "IC_API_KEY env variable is required for this playbook "
    success_msg: "IBM Cloud API KEY is defined"


- name: Validate OpenShift version
  assert:
    that: "sno_version in ['4.8','4.9','4.10']"
    fail_msg: "variable sno_version must be one of 4.8, 4.9 or 4.10"
  when: sno_version is defined

- name: Validate GUI flag
  assert:
    that: "setup_vsi_gui is boolean"
    fail_msg: "variable setup_vsi_gui must be of type boolean"
  when: setup_vsi_gui is defined
  
- name: Verify sno_domain_name parameter
  assert:
    that: 'sno_domain_name is defined and sno_domain_name is string and sno_domain_name is regex("^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,}$")'
    fail_msg: "variable sno_domaon_name musted be defined and be in the format of a domain "

- name: "Verify that remaining variables are defined and have valid format"
  assert:
    that: "{{ item }} is defined and {{ item }} is string and {{ item }} is regex('^[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9]$')"
    fail_msg: "variable {{ item }} is not defined or does not start with an alphabetic char, contains only  alphanumeric chars or dashes and ends with an alphanumeric char"
  with_items:
    - name_prefix
    - region
    - zone
    - resource_group_name
    - sno_cluster_name

- name: Look for token file
  stat:
    path: "auth/token.txt"
  register: token_file

- name: Verify that token file exists
  assert:
    that: token_file.stat.exists
    fail_msg: "Token file auth/token.txt is required for this playbook"
    success_msg: "Required token file exists"

- name: Look for pull secret file
  stat:
    path: "auth/pull-secret.txt"
  register: pull_secret_file

- name: Verify that pull secret file exists
  assert:
    that: pull_secret_file.stat.exists
    fail_msg: "Pull secret  file auth/pull-secret.txt is required for this playbook"
    success_msg: "Required pull secret file exists"

- name: Save validation status as fact
  set_fact:
    cacheable: true
    vars_validated: true
